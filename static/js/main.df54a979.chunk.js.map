{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","getReorderedGoods","useCallback","goods","reorderSortType","reorderIsReversed","visibleGoods","ALPHABET","sort","item1","item2","localeCompare","LENGTH","length","reverse","useMemo","className","type","classNames","onClick","prevIsReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAWE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAoBC,uBACxB,SACEC,EADF,GAMM,IAHQC,EAGT,EAHDP,SACYQ,EAEX,EAFDN,WAGEO,EAAY,YAAOH,GAEvB,OAAQC,GACN,KAAKZ,EAASe,SACZD,EAAeA,EACZE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAC9C,MAEF,KAAKlB,EAASoB,OACZN,EAAeA,EACZE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAWnD,OAJIR,IACFC,EAAeA,EAAaQ,WAGvBR,IAET,CAACT,EAAUE,IAGPI,EAAQY,mBACZ,kBAAMd,EAAkBR,EAAiB,CAAEI,WAAUE,iBACrD,CAACF,EAAUE,IAsBb,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYrB,IAAaL,EAASe,WAEtCY,QA5BmB,WACzBrB,EAAYN,EAASe,UACrBP,GAAc,IAoBV,iCAWA,wBACEiB,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYrB,IAAaL,EAASoB,SAEtCO,QAlCiB,WACvBrB,EAAYN,EAASoB,QACrBZ,GAAc,IA0BV,4BAWA,wBACEiB,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAanB,IAEjBoB,QAxCc,WACpBnB,GAAc,SAAAoB,GAAc,OAAKA,MAiC7B,sBAUEvB,GAAYE,IACZ,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QA5CU,WAClBrB,EAAYN,EAASI,MACrBI,GAAc,IAuCR,sBAUJ,6BACGG,EAAMkB,KAAI,SAACC,GAAD,OACT,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCxInBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df54a979.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const getReorderedGoods = useCallback(\n    (\n      goods: string[],\n      {\n        sortType: reorderSortType,\n        isReversed: reorderIsReversed,\n      }: ReorderOptions,\n    ) => {\n      let visibleGoods = [...goods];\n\n      switch (reorderSortType) {\n        case SortType.ALPHABET:\n          visibleGoods = visibleGoods\n            .sort((item1, item2) => item1.localeCompare(item2));\n          break;\n\n        case SortType.LENGTH:\n          visibleGoods = visibleGoods\n            .sort((item1, item2) => item1.length - item2.length);\n          break;\n\n        default:\n          break;\n      }\n\n      if (reorderIsReversed) {\n        visibleGoods = visibleGoods.reverse();\n      }\n\n      return visibleGoods;\n    },\n    [sortType, isReversed],\n  );\n\n  const goods = useMemo(\n    () => getReorderedGoods(goodsFromServer, { sortType, isReversed }),\n    [sortType, isReversed],\n  );\n\n  const handleAlphabetSort = () => {\n    setSortType(SortType.ALPHABET);\n    setIsReversed(false);\n  };\n\n  const handleLengthSort = () => {\n    setSortType(SortType.LENGTH);\n    setIsReversed(false);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(prevIsReversed => !prevIsReversed);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={handleAlphabetSort}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleLengthSort}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}